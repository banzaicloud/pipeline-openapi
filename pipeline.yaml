openapi: 3.0.0
info:
  description: Pipeline v0.3.0 swagger
  version: "0.3.0"
  title: Pipeline API
  contact:
    email: info@banzaicloud.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: cluster
    description: Cluster realted funtions
  - name: clusters
    description: Clusters realted funtions
  - name: deployment
    description: Functions related for a deployment
  - name: deployments
    description: Deployment related functions for a cluster
  - name: profiles
    description: Cluster profiles related functions
  - name: auth
    description: Auth related functions
  - name: secrets
    description: Secrets related functions
  - name: organizations
    description: Organizations related functions
  - name: common
    description: Common API functions
  - name: users
    description: Users related functions
  - name: info
    description: Cloud config related functions

paths:
  '/api/v1/orgs/{orgId}/clusters':
    post:
      security:
        - bearerAuth: []
      tags:
        - clusters
      summary: Create cluster
      description: Create a new K8S cluster in the cloud
      operationId: CreateCluster
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '202':
          description: Cluster created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClusterResponse_202'
        '400':
          description: Cluster creation failed
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/CreateClusterResponse_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'

            examples:
              AWS:
                value:
                  name: "awscluster-pipelineuser-123"
                  location: "eu-west-1"
                  cloud: "amazon"
                  nodeInstanceType: "m4.xlarge"
                  properties:
                    properties:
                      amazon:
                        $ref: '#/components/schemas/CreateAmazonProperties'

              AKS:
                value:
                  name: "azcluster-pipelineuser-123"
                  location: "westeurope"
                  cloud: "azure"
                  nodeInstanceType: "Standard_D2_v2"
                  properties:
                    azure:
                      $ref: '#/components/schemas/CreateAzureProperties'

              GKE:
                value:
                  name: "gkecluster-pipelineuser-123"
                  location: "us-central1-a"
                  cloud: "google"
                  nodeInstanceType: "n1-standard-1"
                  properties:
                    google:
                      $ref: '#/components/schemas/CreateGoogleProperties'
    get:
      security:
        - bearerAuth: []
      tags:
        - clusters
      summary: List clusters
      operationId: ListClusters
      description: Listing all the K8S clusters from the cloud
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '200':
          description: All cluster listed
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/ClusterListResponse'
        '400':
          description: Error during listing clusters
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  '/api/v1/orgs/{orgId}/clusters/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - cluster
      summary: Get cluster status
      description: Getting cluster status
      operationId: GetCluster
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          description: Selected cluster identification (number)
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Getting cluster succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClusterStatusResponse'
        '400':
          description: Error during getting cluster details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'

    put:
      security:
        - bearerAuth: []
      tags:
        - cluster
      summary: Update cluster
      description: Updating an existing K8S cluster
      operationId: UpdateCluster
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          description: Selected cluster identification (number)
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: Cluster update accepted
        '400':
          description: Error during updating cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterRequest'

    delete:
      security:
        - bearerAuth: []
      tags:
        - cluster
      summary: Delete cluster
      description: Deleting a K8S cluster
      operationId: DeleteCluster
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          description: Selected cluster identification (number)
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: Cluster deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterDelete_200'
        '400':
          description: Error during deleting cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Cluster not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_500'

    head:
      security:
        - bearerAuth: []
      tags:
        - cluster
      summary: Get cluster status
      operationId: GetClusterStatus
      description: Getting the K8S cluster status
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: Cluster deleted successfully
        '400':
          description: Error during getting cluster status
        '401':
          description: Unauthorized
        '404':
          description: Cluster not found

  '/api/v1/orgs/{orgId}/clusters/{id}/config':
    get:
      security:
        - bearerAuth: []
      tags:
       - cluster
      summary: Get a cluster config
      operationId: GetClusterConfig
      description: Getting a K8S cluster config file
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "Getting config file succeeded"
          content:
            text/plain:
              schema:
                type: string
                example: "encoded configuration file..."
        '400':
          description: "Error during getting config file"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'

  '/api/v1/orgs/{orgId}/clusters/{id}/apiendpoint':
    get:
      security:
        - bearerAuth: []
      tags:
        - cluster
      summary: Get API endpoint
      operationId: GetAPIEndpoint
      description: Get API endpoint
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "API endpoint showed"
          content:
            text/plain:
              schema:
                type: string
                example: "35.195.56.31"
        '400':
          description: "Error during getting API endpoint"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'

  '/api/v1/orgs/{orgId}/clusters/{id}/monitoring':
    post:
      security:
        - bearerAuth: []
      tags:
        - cluster
      summary: Update monitoring
      operationId: UpdateMonitoring
      description: Update monitoring
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "Monitoring updated"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"

  '/api/v1/orgs/{orgId}/clusters/{id}/endpoints':
    get:
      security:
        - bearerAuth: []
      tags:
        - cluster
      summary: List service public endpoints
      operationId: ListEndpoints
      description: List service public endpoints
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "Endpoints listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEndpointsResponse'
        '400':
          description: "Error during getting endpoints"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_500'

  '/api/v1/orgs/{orgId}/clusters/{id}/helminit':
    post:
      security:
        - bearerAuth: []
      tags:
       - cluster
      summary: Initialize Helm
      operationId: HelmInit
      description: Initialize helm in the cluster
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '201':
          description: "Helm initialized int the cluster"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmInitResponse'
        '400':
          description: "Error during getting endpoints"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmInitRequest'

  '/api/v1/orgs/{orgId}/clusters/{id}/helm/repos':
    get:
      security:
        - bearerAuth: []
      tags:
       - helm
      summary: List repositories
      operationId: HelmInit
      description: Listing Helm repositories in the cluster
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "Repositories listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmReposListResponse'
        '400':
          description: "Error during getting endpoints"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'

    post:
      security:
        - bearerAuth: []
      tags:
       - helm
      summary: Add Repo
      operationId: HelmReposAdd
      description: Add new Helm repository
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "resource successfully added."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmReposAddResponse'
        '400':
          description: "Error adding Helm repo"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmReposAddRequest'

  '/api/v1/orgs/{orgId}/clusters/{id}/helm/repos/{repoName}':
    delete:
      security:
        - bearerAuth: []
      tags:
       - helm
      summary: Delete Repo
      operationId: HelmReposDelete
      description: Delete  Helm repository
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
        - name: repoName
          in: path
          required: true
          description: Helm repo name
          schema:
            type: string
      responses:
        '200':
          description: "resource deleted successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmReposDeleteResponse'
        '400':
          description: "error deleting Helm repos"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'


  '/api/v1/orgs/{orgId}/clusters/{id}/helm/repos/{repoName}/update':
    put:
      security:
        - bearerAuth: []
      tags:
       - helm
      summary: Update Repo
      operationId: HelmReposUpdate
      description: Modify Helm repository
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
        - name: repoName
          in: path
          required: true
          description: Helm repo name
          schema:
            type: string
      responses:
        '200':
          description: "resource modified successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmReposUpdateResponse'
        '400':
          description: "repo modification failed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Resource found"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ClusterNotFound'
                  - $ref: '#/components/schemas/RepoNotFound'

  '/api/v1/orgs/{orgId}/clusters/{id}/helm/charts/?':
    get:
      security:
        - bearerAuth: []
      tags:
       - helm
      summary: Chart List
      operationId: HelmChartList
      description: Get available Helm chart's list
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
        - name: name
          in: query
          required: false
          description: Chart Name
          schema:
            type: string
        - name: repo
          in: query
          required: false
          description: Repo Name
          schema:
            type: string
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmChartsListResponse'
        '400':
          description: "error parsing request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Resource found"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ClusterNotFound'



  '/api/v1/orgs/{orgId}/clusters/{id}/deployments':
    get:
      security:
        - bearerAuth: []
      tags:
        - deployments
      summary: List deployments
      operationId: ListDeployments
      description: Listing Helm deployments
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "Deployments listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsResponse'
        '400':
          description: "Error during getting endpoints"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'
    post:
      security:
        - bearerAuth: []
      tags:
        - deployments
      summary: Create a Helm deployment
      operationId: CreateDeployment
      description: Creating a Helm deployment
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
      responses:
        '201':
          description: "Deployment created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '400':
          description: "Error during creating deployment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '404':
          description: "Cluster not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotFound'
    head:
      security:
        - bearerAuth: []
      tags:
        - deployments
      summary: Get tiller status
      operationId: GetTillerStatus
      description: Checking if tiller ready to accept deployments
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Selected cluster identification (number)
          schema:
            type: integer
      responses:
        '200':
          description: "Tiller is available"
        '400':
          description: "Error during creating deployment"
        '401':
          description: "Unauthorized"
        '404':
          description: "Cluster not found"

  '/api/v1/orgs/{orgId}/clusters/{id}/deployments/{name}':
      delete:
        security:
          - bearerAuth: []
        tags:
          - deployment
        summary: Delete deployment
        operationId: DeleteDeployment
        description: Deleting a Helm deployment
        parameters:
          - name: orgId
            in: path
            required: true
            description: Organization identification
            schema:
              type: integer
          - name: id
            in: path
            required: true
            description: Selected cluster identification (number)
            schema:
              type: integer
          - name: name
            in: path
            required: true
            description: Deployment name
            schema:
              type: string
        responses:
          '200':
            description: "Deployment deleted successfully"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DeleteDeploymentResponse'
          '400':
            description: "Error during delete deployment"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BaseError_400'
          '401':
            description: "Unauthorized"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '404':
            description: "Cluster not found"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClusterNotFound'

      put:
        security:
          - bearerAuth: []
        tags:
          - deployment
        summary: Update deployment
        operationId: UpdateDeployment
        description: Updating a Helm deployment
        parameters:
          - name: orgId
            in: path
            required: true
            description: Organization identification
            schema:
              type: integer
          - name: id
            in: path
            required: true
            description: Selected cluster identification (number)
            schema:
              type: integer
          - name: name
            in: path
            required: true
            description: Deployment name
            schema:
              type: string
        responses:
          '501':
            description: "Not implemented"
      head:
        tags:
         - deployment
        summary: Check deployment status
        operationId: HelmDeploymentStatus
        description: Checking the status of a deployment through the Helm client API
        parameters:
          - name: orgId
            in: path
            required: true
            description: Organization identification
            schema:
              type: integer
          - name: id
            in: path
            required: true
            description: Selected cluster identification (number)
            schema:
              type: integer
          - name: name
            in: path
            required: true
            description: Deployment name
            schema:
              type: string
        responses:
          '200':
            description: "Deployment status is OK"
          '400':
            description: "Error during checking deployment status"
          '401':
            description: "Unauthorized"
          '404':
            description: "Cluster not found"

  '/api/v1/orgs/{orgId}/profiles/cluster/{type}':
    get:
      security:
          - bearerAuth: []
      tags:
        - profiles
      summary: List cluster profiles
      operationId: ListProfiles
      description: Listing cluster profiles by cloud type
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: type
          in: path
          required: true
          description: Cloud type
          schema:
            type: string
      responses:
        '200':
          description: "Profiles listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileListResponse'
        '400':
            description: "Error during delete deployment"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/profiles/cluster':
    post:
      security:
          - bearerAuth: []
      tags:
        - profiles
      summary: Add cluster profiles
      operationId: AddProfiles
      description: Add cluster profile
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClusterProfileRequest'
      responses:
        '201':
          description: "Cluster profile created successfully"
        '400':
            description: "Error during delete deployment"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

    put:
      security:
          - bearerAuth: []
      tags:
        - profiles
      summary: Update cluster profiles
      operationId: UpdateProfiles
      description: Update an existing cluster profile
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClusterProfileRequest'
      responses:
        '201':
          description: "Cluster profile updated successfully"
        '400':
          description: Error during updating cluster profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Cluster profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterProfileNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_500'

  '/api/v1/orgs/{orgId}/profiles/cluster/{type}/{name}':
    delete:
      security:
          - bearerAuth: []
      tags:
        - profiles
      summary: Delete cluster profiles
      operationId: DeleteProfiles
      description: Delete cluster profiles by cloud type and name
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: type
          in: path
          required: true
          description: Cloud type
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: Cluster profile name
          schema:
            type: string
      responses:
        '201':
          description: "Cluster profile deleted successfully"
        '400':
          description: Error during deleting cluster profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Cluster profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterProfileNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_500'

  /token:
    get:
      security:
          - bearerAuth: []
      tags:
        - auth
      summary: Generate token
      operationId: GetToken
      description: Generate token
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_500'
  '/api/v1/orgs/{orgId}/secrets':
    get:
      security:
          - bearerAuth: []
      tags:
        - secrets
      summary: List secrets
      operationId: GetSecrets
      description: Listing secrets
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '200':
          description: Secrets listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsListResponse'
        '400':
          description: Error during listing secrets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      security:
          - bearerAuth: []
      tags:
        - secrets
      summary: Add secrets
      operationId: AddSecrets
      description: Adding secrets
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretRequest'
      responses:
        '201':
          description: Secret saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecretResponse'
        '400':
          description: Error during adding secrets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_500'

  '/api/v1/orgs/{orgId}/secrets/{type}':
    get:
      security:
          - bearerAuth: []
      tags:
        - secrets
      summary: List secrets with filter
      operationId: GetSecretsWithFilter
      description: Listing secrets with filter
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: type
          in: path
          required: true
          description: Secret type
          schema:
            type: string
      responses:
        '200':
          description: Secrets listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsListResponse'
        '400':
          description: Error during listing secrets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/allowed/secrets':
    get:
      security:
          - bearerAuth: []
      tags:
        - secrets
      summary: List allowed secret types
      operationId: AllowedSecretsTypes
      description: List allowed secret types and their required keys
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '200':
          description: Allowed types listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedSecretTypesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/allowed/secrets/{type}':
    get:
      security:
          - bearerAuth: []
      tags:
        - secrets
      summary: List required keys
      operationId: AllowedSecretsTypesKeys
      description: List required keys in the given secret type
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: type
          in: path
          required: true
          description:  Secret type
          schema:
            type: string
      responses:
        '200':
          description: Required keys listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredKeysResponse'
        '400':
          description: Error during listing secret types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/secrets/{secretId}':
    delete:
      security:
          - bearerAuth: []
      tags:
        - secrets
      summary: Delete secrets
      operationId: DeleteSecrets
      description: Deleting secrets
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: secretId
          in: path
          required: true
          description: Secret identification
          schema:
            type: string
      responses:
        '204':
          description: Secret deleted successfully
        '400':
          description: Error during deleting secrets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Secrets not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsNotFound'

  '/api/v1/orgs/{orgId}':
    get:
      security:
          - bearerAuth: []
      tags:
        - organizations
      summary: Get organization
      operationId: GetOrg
      description: Getting organization
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '200':
          description: "Organization getting successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListItemResponse'
        '400':
          description: Error during getting organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationNotFound'

  '/api/v1/orgs':
    get:
      security:
          - bearerAuth: []
      tags:
        - organizations
      summary: List organizations
      operationId: ListOrgs
      description: Listing organizations
      responses:
        '200':
          description: "Organizations listed successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
        '400':
          description: Error during listing organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      security:
          - bearerAuth: []
      tags:
        - organizations
      summary: Create organization
      operationId: CreateOrg
      description: Creating organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "myOrgName"
      responses:
        '200':
          description: "Organizations created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationCreateResponse'
        '400':
          description: Error during creating organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_500'

  '/api':
    get:
      tags:
        - common
      summary: List Pipeline API endpoints
      operationId: ListEndpoints
      description: Listing Pipeline API endpoint
      responses:
        '200':
          description: "Endpoints listed"
          content:
            application/json:
              schema:
                type: array
                example: [
                  "/api/v1/orgs",
                  "/api/v1/orgs/:orgid",
                  ]

  '/api/v1/orgs/{orgId}/users':
    get:
      security:
          - bearerAuth: []
      tags:
        - users
      summary: List users
      operationId: ListUsers
      description: Listing users
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '200':
          description: "Users listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserResponse'

  '/api/v1/orgs/{orgId}/users/{userId}':
    get:
      security:
          - bearerAuth: []
      tags:
        - users
      summary: Get user
      operationId: GetUsers
      description: Getting user
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          description: User identification
          schema:
            type: integer
      responses:
        '200':
          description: "Getting user succeeded"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  '/api/v1/orgs/{orgId}/cloudinfo':
    get:
      security:
          - bearerAuth: []
      tags:
        - info
      summary: Get supported cloud types
      operationId: GetSupportedClouds
      description: Get supported cloud types
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '200':
          description: "Supported clouds listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedCloudsResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/cloudinfo/filters':
    get:
      security:
          - bearerAuth: []
      tags:
        - info
      summary: Get supported filter keys
      operationId: GetSupportedFilter
      description: Get supported filter types
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      responses:
        '200':
          description: "Supported filter words listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedFiltersResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/cloudinfo/amazon':
    post:
      security:
          - bearerAuth: []
      tags:
        - info
      summary: Get all amazon config
      operationId: GetAmazonConfig
      description: Get all amazon config
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmazonConfigRequest'
      responses:
        '200':
          description: "Amazon config listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmazonConfigResponse'
        '400':
          description: Error during listing config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/cloudinfo/azure':
    post:
      security:
          - bearerAuth: []
      tags:
        - info
      summary: Get all azure config
      operationId: GetAzureConfig
      description: Get all azure config
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureConfigRequest'
      responses:
        '200':
          description: "Azure config listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AzureConfigResponse'
        '400':
          description: Error during listing config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

  '/api/v1/orgs/{orgId}/cloudinfo/google':
    post:
      security:
          - bearerAuth: []
      tags:
        - info
      summary: Get all google config
      operationId: GetGoogleConfig
      description: Get all google config
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization identification
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleConfigRequest'
      responses:
        '200':
          description: "Azure config listed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleConfigResponse'
        '400':
          description: Error during listing config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError_400'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    CreateClusterRequest:
      type: object
      required:
        - name
        - location
        - nodeInstanceType
        - cloud
        - secret_id
        - properties
      properties:
        name:
          type: string
          example: "gkecluster-pipelineuser-123"
        location:
          type: string
          example: "us-central1-a"
        nodeInstanceType:
          type: string
          example: "n1-standard-1"
        cloud:
          type: string
          example: "google"
        secret_id:
          type: string
          example: "62bc3c75-91fb-4670-bad4-24b401a9deac"
        properties:
          type: object
          oneOf:
            - $ref: '#/components/schemas/CreateAmazonProperties'
            - $ref: '#/components/schemas/CreateAzureProperties'
            - $ref: '#/components/schemas/CreateGoogleProperties'
          example:
            google:
              project:
                master:
                  version: "1.8.7-gke.1"
                nodePools:
                  pool1:
                    count: 1
                    nodeInstanceType: "n1-standard-2"
                nodeVersion: "1.8.7-gke.1"

    CreateAmazonProperties:
      type: object
      required:
        - amazon
      properties:
        amazon:
          type: object
          required:
            - master
            - node
          properties:
            master:
              type: object
              properties:
                instanceType:
                  type: string
                  example: "m4.xlarge"
                image:
                  type: string
                  example: "ami-06d1667f"
            node:
              type: object
              properties:
                spotPrice:
                  type: string
                  example: "0.2"
                minCount:
                  type: integer
                  example: 1
                maxCount:
                  type: integer
                  example: 2
                image:
                  type: string
                  example: "ami-06d1667f"

    CreateAzureProperties:
      type: object
      required:
        - azure
      properties:
        azure:
          type: object
          required:
            - kubernetesVersion
            - resourceGroup
          properties:
            resourceGroup:
              type: string
              example: "myRg"
            kubernetesVersion:
              type: string
              example: "1.8.2"
            nodePools:
              type: object
              properties:
                agentpool1:
                  type: object
                  properties:
                    count:
                      type: number
                      example: 1
                    nodeInstanceType:
                      type: string
                      example: "Standard_B2ms"

    CreateGoogleProperties:
      type: object
      required:
        - google
      properties:
        google:
          type: object
          required:
             - project
          properties:
            project:
              type: string
              example: "projectId"
            master:
              type: object
              properties:
                version:
                  type: string
                  example: "1.8.7-gke.1"
            nodeVersion:
              type: string
              example: "1.8.7-gke.1"
            nodePools:
              type: object
              properties:
                agentpool1:
                  type: object
                  properties:
                    count:
                      type: number
                      example: 1
                    nodeInstanceType:
                      type: string
                      example: "n1-standard-2"

    CreateClusterResponse_202:
      type: object
      properties:
        name:
          type: string
          example: "gkecluster-pipelineuser-123"
        id:
          type: integer
          example: 1

    CreateClusterResponse_400:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid version
        error:
          type: string
          example: Invalid version

    ClusterListResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetClusterStatusResponse'

    BaseError_400:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Error during process"
        error:
          type: string
          example: "Error during process"

    BaseError_500:
      type: object
      properties:
        code:
          type: integer
          example: 500
        message:
          type: string
          example: "Error during process"
        error:
          type: string
          example: "Error during process"

    ClusterNotFound:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "Cluster not found"
        error:
          type: string
          example: "record not found"

    RepoNotFound:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "repo not found"
        error:
          type: string
          example: "repo not found"


    ClusterProfileNotFound:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "Profile not found"
        error:
          type: string
          example: "record not found"

    UpdateClusterRequest:
      type: object
      required:
        - cloud
        - properties
      properties:
        cloud:
          type: string
          example: google
        properties:
          type: object
          oneOf:
            - $ref: '#/components/schemas/UpdateAmazonProperties'
            - $ref: '#/components/schemas/UpdateAzureProperties'
            - $ref: '#/components/schemas/UpdateGoogleProperties'
          example:
            google:
              master:
                version: "1.9.4-gke.1"
              nodePools:
                pool1:
                  count: 2
                  nodeInstanceType: "n1-standard-2"

    UpdateAmazonProperties:
      type: object
      required:
        - amazon
      properties:
        amazon:
          type: object
          properties:
            node:
              type: object
              properties:
                minCount:
                  type: integer
                  example: 2
                maxCount:
                  type: integer
                  example: 4

    UpdateAzureProperties:
      type: object
      required:
        - azure
      properties:
        azure:
          type: object
          properties:
            nodePools:
              type: object
              properties:
                pool1:
                  type: object
                  properties:
                    count: 
                      type: number
                      example: 2

    UpdateGoogleProperties:
      type: object
      properties:
        master:
          type: object
          properties:
            version:
              type: string
        nodePools:
          type: object
          properties:
            pool1:
              type: object
              properties:
                count:
                  type: number
                  example: 1
                nodeInstanceType:
                  type: string
                  example: "n1-standard-2"

    ClusterDelete_200:
      type: object
      properties:
        status:
          type: integer
          example: 202
        name:
          type: string
          example: "gkecluster-pipelineuser-123"
        id:
          type: integer
          example: 1

    Unauthorized:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: "Invalid token"
        error:
          type: string
          example: "token contains an invalid number of segments"

    ListEndpointsResponse:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/EndpointItem'

    EndpointItem:
      type: object
      properties:
        name:
          type: string
          example: "pipeline-traefik"
        host:
          type: string
          example: "11.11.11.111"
        urls:
          type: array
          items:
            $ref: '#/components/schemas/URLItem'
          example:

    URLItem:
      type: object
      properties:
        servicename:
          type: string
          example: "serviceName"
        url:
          type: string
          example: "url"

    ListDeploymentsResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "pipeline"
          chart:
            type: string
            example: "pipeline-cluster-ingress-0.0.1"
          version:
            type: integer
            example: 1
          updated:
            type: string
            example: "Wed Mar  7 09:56:57 2018"
          status:
            type: string
            example: "DEPLOYED"

    CreateDeploymentRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        releasename:
          type: string
        version:
          type: string
        values:
          type: object
      example:
          name: "banzaicloud-stable/drone"


    CreateDeploymentResponse:
      type: object
      properties:
        release_name:
          type: string
          example: "vigilant-mandrill"
        notes:
          type: string
          example: "deploy notes"

    DeleteDeploymentResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "Deployment deleted!"
        name:
          type: string
          example: "vigilant-mandrill"

    HelmInitResponse:
      type: object
      properties:
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "helm initialising"

    HelmInitRequest:
      type: object
      required:
        - namespace
        - service_account
      properties:
        kube_context:
          type: string
        namespace:
          type: string
        upgrade:
          type: boolean
        service_account:
          type: string
        canary_image:
          type: boolean
        tiller_image:
          type: string
        history_max:
          type: integer
      example:
        namespace: "kube-system"
        service_account: "tiller"
        tiller_image: "gcr.io/kubernetes-helm/tiller:v2.7.2"

    HelmReposListResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "stable"
          cache:
            type: string
            example: "statestore/<cluster_name>/helm/repository/cache/stable-index.yaml"
          url:
            type: string
            example: "https://kubernetes-charts.storage.googleapis.com"
          certFile:
            type: string
            example: ""
          keyFile:
            type: string
            example: ""
          caFile:
            type: string
            example: ""

    HelmReposAddResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "resource successfully added."
        name:
          type: string
          example: "stable"
          
    HelmReposAddRequest:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
        url:
          type: string
        certFile:
          type: string
        keyFile:
          type: string
        caFile:
          type: string
      example:
          name: "stable"
          url: "https://kubernetes-charts.storage.googleapis.com"

    HelmReposDeleteResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "resource deleted successfully"
        name:
          type: string
          example: "stable"

    HelmReposUpdateResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "resource modified successfully"
        name:
          type: string
          example: "stable"

    HelmChartsListResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "pipeline-cluster-monitor"
          home:
            type: string
            example: "https://banzaicloud.com"
          sources:
            type: array
            example: ["https://github.com/banzaicloud/charts/"]
          version:
            type: string
            example: "0.0.2"
          description:
            type: string
            example: "A Helm chart for Kubernetes"
          keywords:
            type: array
            example: ["pipeline, cluster, prometheus, monitor"]
          apiVersion:
            type: string
            example: "v1"
          urls:
            type: array
            example: ["pipeline-cluster-monitor-0.0.2.tgz"]
          created:
            type: string
            example: "2018-04-02T18:57:15.650255071Z"
          digest:
            type: string
            example: "5c3391d0752b7657da42a6e09454dc2d68e73bd0522a6739cc54c0b783b0b1bd"

    ProfileListResponse:
      type: object
      properties:
        instanceName:
          type: string
          example: "default"
        location:
          type: string
          example: "us-central1-a"
        cloud:
          type: string
          example: "google"
        nodeInstanceType:
          type: string
          example: "n1-standard-1"
        properties:
          type: object
          oneOf:
            - $ref: '#/components/schemas/ClusterProfileAmazon'
            - $ref: '#/components/schemas/ClusterProfileAzure'
            - $ref: '#/components/schemas/ClusterProfileGoogle'
          example:
            google:
              master:
                version: "1.8.7-gke.1"
              node:
                count: 1
                version: "1.8.7-gke.1"
                serviceAccount: ""

    ClusterProfileAmazon:
      type: object
      properties:
        amazon:
          type: object
          properties:
            master:
              type: object
              properties:
                instanceType:
                  type: string
                  example: "m4.xlarge"
                image:
                  type: string
                  example: "ami-06d1667f"
            node:
              type: object
              properties:
                spotPrice:
                  type: string
                  example: "0.2"
                minCount:
                  type: integer
                  example: 1
                maxCount:
                  type: integer
                  example: 2

    ClusterProfileAzure:
      type: object
      properties:
        azure:
          type: object
          properties:
            node:
              type: object
              properties:
                count:
                  type: integer
                  example: 1
                agentName:
                  type: string
                  example: "agentpool1"
                kubernetesVersion:
                  type: string
                  example: "1.8.2"

    ClusterProfileGoogle:
      type: object
      properties:
        google:
          type: object
          properties:
            master:
              type: object
              properties:
                version:
                  type: string
                  example: 1.8.7-gke.1
            node:
              type: object
              properties:
                count:
                  type: integer
                  example: 1
                version:
                  type: string
                  example: 1.8.7-gke.1
                serviceAccount:
                  type: string
                  example: "serviceAccountExample"

    AddClusterProfileRequest:
      type: object
      properties:
        instanceName:
          type: string
          example: "myCluster-profile"
        location:
          type: string
          example: "us-central1-a"
        cloud:
          type: string
          example: "google"
        nodeInstanceType:
          type: string
          example: "n1-standard-1"
        properties:
          type: object
          oneOf:
            - $ref: '#/components/schemas/AddClusterProfileAmazon'
            - $ref: '#/components/schemas/AddClusterProfileAzure'
            - $ref: '#/components/schemas/AddClusterProfileGoogle'
          example:
            google:
              master:
                version: "1.8.7-gke.1"
              node:
                count: 1
                version: "1.8.7-gke.1"

    AddClusterProfileAmazon:
      type: object
      properties:
        amazon:
          type: object
          properties:
            master:
              type: object
              properties:
                instanceType:
                  type: string
                  example: "m4.xlarge"
                image:
                  type: string
                  example: "ami-06d1667f"
            node:
              type: object
              properties:
                spotPrice:
                  type: string
                  example: "0.2"
                minCount:
                  type: integer
                  example: 1
                maxCount:
                  type: integer
                  example: 2
                image:
                  type: string
                  example: "ami-06d1667f"

    AddClusterProfileAzure:
      type: object
      properties:
        azure:
          type: object
          properties:
            node:
              type: object
              properties:
                resourceGroup:
                  type: string
                  example: "myRg"
                count:
                  type: integer
                  example: 1
                agentName:
                  type: string
                  example: "agentpool1"
                kubernetesVersion:
                  type: string
                  example: "1.8.2"

    AddClusterProfileGoogle:
      type: object
      properties:
        google:
          type: object
          properties:
            master:
              type: object
              properties:
                version:
                  type: string
                  example: "1.8.7-gke.1"
            node:
              type: object
              properties:
                count:
                  type: integer
                  example: 1
                serviceAccount:
                  type: string
                  example: "serviceAccountExample"
                version:
                  type: string
                  example: "1.8.7-gke.1"
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: "jkjb342hb424j3b24"

    SecretsListResponse:
      type: object
      properties:
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/SecretsListItem'

    SecretsListItem:
      type: object
      properties:
        id:
          type: string
          example: "62bc3c75-91fb-4670-bad4-24b401a9deac"
        name:
          type: string
          example: "My google secret"
        type:
          type: string
          example: "GOOGLE_SECRET"

    CreateSecretResponse:
      type: object
      properties:
        name:
          type: string
          example: "My google secret"
        type:
          type: string
          example: "GOOGLE_SECRET"
        secret_id:
          type: string
          example: "62bc3c75-91fb-4670-bad4-24b401a9deac"

    CreateSecretRequest:
      type: object
      properties:
        name:
          type: string
          example: "My google secret"
        type:
          type: string
          example: "GOOGLE_SECRET"
        values:
          type: array
          items:
            $ref: '#/components/schemas/SecretKeyValue'

    SecretKeyValue:
      type: object
      properties:
        project_id:
          type: string
          example: "mygoogleprojectid"

    SecretsNotFound:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "Secrets not found"
        error:
          type: string
          example: "There are no secrets with [1] organization id and [15205947761] secret id"

    OrganizationListResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationListItemResponse'

    OrganizationListItemResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        createdAt:
          type: string
          example: "2018-03-09T13:24:49+01:00"
        updatedAt:
          type: string
          example: "2018-03-09T13:24:49+01:00"
        name:
          type: string
          example: "myOrgName"

    OrganizationCreateResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        createdAt:
          type: string
          example: "2018-03-09T13:24:49+01:00"
        updatedAt:
          type: string
          example: "2018-03-09T13:24:49+01:00"
        name:
          type: string
          example: "myOrgName"
        users:
          type: array
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        createdAt:
          type: string
          example: "2018-03-09T13:24:49+01:00"
        updatedAt:
          type: string
          example: "2018-03-09T13:24:49+01:00"
        name:
          type: string
          example: "myName"
        email:
          type: string
          example: "my@email.com"
        login:
          type: string
          example: "username"
        image:
          type: string
          example: "githubImageUrl.com/imageId/3"
        organizations:
          type: object
          example: null

    OrganizationNotFound:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "Organization not found"
        error:
          type: string
          example: "Organization not found"

    AllowedSecretTypesResponse:
      type: object
      properties:
        alllowed:
          type: object
          properties:
            AMAZON_SECRET:
              type: array
              items:
                type: string
              example: [ "AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"]
            AZURE_SECRET:
              type: array
              items:
                type: string
              example: [ "AZURE_CLIENT_ID",  "AZURE_CLIENT_SECRET", "AZURE_TENANT_ID", "AZURE_SUBSCRIPTION_ID" ]
            GOOGLE_SECRET:
              type: array
              items:
                type: string
              example: [
                          "type",
                          "project_id",
                          "private_key_id",
                          "private_key",
                          "client_email",
                          "client_id",
                          "auth_uri",
                          "token_uri",
                          "auth_provider_x509_cert_url",
                          "client_x509_cert_url"
                        ]

    RequiredKeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
            example: [
                      "type",
                      "project_id",
                      "private_key_id",
                      "private_key",
                      "client_email",
                      "client_id",
                      "auth_uri",
                      "token_uri",
                      "auth_provider_x509_cert_url",
                      "client_x509_cert_url"
                    ]

    ListUserResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'

    SupportedCloudsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SupportedCloudItem'

    SupportedCloudItem:
      type: object
      properties:
        name:
          type: string
          example: "Google Kubernetes Engine"
        key:
          type: string
          example: "google"

    SupportedFiltersResponse:
      type: object
      properties:
        keys:
          type: array
          example: [
                  "location",
                  "instanceType",
                  "k8sVersion"
                  ]

    AmazonConfigRequest:
      type: object
      properties:
        filter:
          type: object
          properties:
            fields:
              type: array
              example: [ "location", "instanceType" ]
        instanceType:
          type: object
          properties:
            tags:
              type: array
              example: [ "0.3.0" ]
            zone:
              type: string
              example: "eu-west-1"

    AzureConfigRequest:
      type: object
      properties:
        secret_id:
          type: string
          example: "myAzureSecretId"
        filter:
          type: object
          properties:
            fields:
              type: array
              example: [ "location", "instanceType", "k8sVersion" ]
        instanceType:
          type: object
          properties:
            zone:
              type: string
              example: "eastus"
        k8sVersion:
          type: object
          properties:
            zone:
              type: string
              example: "eastus"

    GoogleConfigRequest:
      type: object
      properties:
        secret_id:
          type: string
          example: "myGoogleSecretId"
        filter:
          type: object
          properties:
            fields:
              type: array
              example: [ "location", "instanceType", "k8sVersion" ]
        instanceType:
          type: object
          properties:
            zone:
              type: string
              example: "asia-east1-a"
        k8sVersion:
          type: object
          properties:
            zone:
              type: string
              example: "us-central1-a"

    AmazonConfigResponse:
      type: object
      properties:
        type:
          type: string
          example: "amazon"
        nameRegexp:
          type: string
          example: "^[A-z0-9-_]{1,255}$"
        locations:
          type: string
          example: [ "ap-south-1", "us-east-2" ]
        nodeInstanceType:
          type: object
          properties:
            eu-west-1:
              type: array
              example: [ "ami-6202561b", "ami-ece5b095" ]

    AzureConfigResponse:
      type: object
      properties:
        type:
          type: string
          example: "azure"
        nameRegexp:
          type: string
          example: "^[a-z0-9_]{0,31}[a-z0-9]$"
        locations:
          type: string
          example: [ "eastasia", "eastus" ]
        nodeInstanceType:
          type: object
          properties:
            eastus:
              type: array
              example: [ "Standard_B1ms", "Standard_B1s" ]
        kubernetes_versions:
          type: array
          example: [ "1.8.1", "1.8.6" ]

    GoogleConfigResponse:
      type: object
      properties:
        type:
          type: string
          example: "google"
        nameRegexp:
          type: string
          example: "^[a-z]$|^[a-z][a-z0-9-]{0,38}[a-z0-9]$"
        locations:
          type: string
          example: [ "us-east1-c", "us-east1-d" ]
        nodeInstanceType:
          type: object
          properties:
            asia-east1-a:
              type: array
              example: [ "f1-micro", "g1-small" ]
        kubernetes_versions:
          type: object
          properties:
            defaultClusterVersion:
              type: string
              example: "1.8.8-gke.0"
            defaultImageType:
              type: string
              example: "COS"
            validImageTypes:
              type: array
              example: [ "COS" ]
            validMasterVersions:
              type: array
              example: ["1.9.6-gke.0", "1.9.4-gke.1"]
            validNodeVersions:
              type: array
              example: ["1.9.6-gke.0", "1.9.4-gke.1"]
    
    GetClusterStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: "RUNNING"
        name: 
          type: string
          example: "myClusterName"
        cloud:
          type: string
          example: "google"
        location:
          type: string
          example: "us-central1-a"
        nodeInstanceType:
          type: string
          example: "n1-standard-1"
        id:
          type: number
          example: 1
        nodePools:
          type: object
          properties:
            pool1:
              type: object
              properties:
                count:
                  type: number
                  example: 1
                nodeInstanceType:
                  type: string
                  example: "n1-standard-1"

      
      




